# Default values for saleor-helm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: registry.gitlab.com/trieb.work/saleor
  pullPolicy: IfNotPresent



fullnameOverride: saleor-api

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8000

ingress:
  enabled: false
  annotations:
    certmanager.k8s.io/acme-challenge-type: http01
    certmanager.k8s.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: chart-example.local
      paths: 
        - '/graphql'
        - '/feeds/google'
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

saleor:
  resources:
    requests:
      cpu: 300m
      memory: 400Mi
    limits:
      memory: 500Mi
  

celeryrunner:
  fullname: celery-worker
  resources:
    requests:
      cpu: 80m
      memory: 400Mi
    limits:
      cpu: 280m
      memory: 500Mi


nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        topologyKey: kubernetes.io/hostname

# Settings concerning the redis server goes here:
redis:
  cluster:
    enabled: false
  resources:
    requests:
      cpu: 30m
      memory: 70Mi
    limits:
      cpu: 80m
      memory: 80Mi

# enable the cronjob to create the Google Merchant Productfeed. Works only when S3 storage is active!
productfeedJob:
  enabled: false

# enable the cronnjob to create DB backups to S3. You can specify how many DB dumps should be kept.
postgresBackup:
  enabled: false
  historyLimit: 5
  schedule: 0 */8 * * *
  bucketName: postgres-backup


# Settings concerning the postgresql server goes here:
postgresql:
  persistence:
    size: 10Gi
  replication:
    enabled: false
  resources:
    limits:
      memory: 300Mi 
    requests:
      cpu: 200m
      memory: 200Mi   
 
# global settings both for saleor and postgresql. Set the password to something save ;) 
global:
  postgresql:
    postgresqlDatabase: saleor
    postgresqlUsername: postgres
    postgresqlPassword: privacy-disarray-mop0
  redis:
    password: w6736iu-1346726hz12-578-2h228u3576jh24658-456h
  emailUrl: smtp://test@triebwork.com:XXXXXXXX@smtp.mailgun.org:465/?ssl=True
  secretKey: sefb68-2133r-24577v-tgnqetb-qe5zb
  AWS_S3_ENDPOINT_URL:
  AWS_S3_CUSTOM_DOMAIN:
  AWS_ACCESS_KEY_ID:
  AWS_STORAGE_BUCKET_NAME:
  AWS_MEDIA_BUCKET_NAME:
  AWS_MEDIA_CUSTOM_DOMAIN:
  # this enables querystring authentication. Very useful for private buckets.
  AWS_QUERYSTRING_AUTH: True
  # this tells django how long the item is accessible with querystring auth. Setting this to five days
  AWS_QUERYSTRING_EXPIRE: "432000"
  SENTRY_DSN: ""
  env: 
    - name: DEFAULT_CURRENCY
      value: EUR
    - name: DEFAULT_COUNTRY
      value: DE
    - name: DEBUG
      value: "False" 
  allowedHosts: test-api.example.com
  # maximum nu,ber of checkout line items. Normal value is 50
  maxCheckoutLine: "100"
  elasticApm:
    enabled: "False"
    serviceName: "saleor-services"
    secretToken: ""
    serverUrl: ""
    environment: "dev"
    disabledMetrics: "*.cpu.*,*.memory.*"
    serverTimeout: "10s"
    metricsInterval: "0s"
    logLevel: "critical"



# settings for the image pull secret if needed
imageCredentials:
  enabled: false
  registry: registry.gitlab.com
  username: someone
  password: sillyness
# set to "generated" if you enable the imageCredentials creation
imagePullSecrets: 
#  - name: generated